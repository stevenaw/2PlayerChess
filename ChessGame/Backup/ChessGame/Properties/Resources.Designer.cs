//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChessGame.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ChessGame.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Castling
        ///
        ///Castling is a unique move in which two pieces change positions in one turn. Castling can only occur if a King and one of his rooks are in their original positions, with nothing in between, if the king is not in check, ad the king has not yet moved in the game.
        ///When castling, the king moves over two squares, and the rook he moves towards is placed on the other side of him. Not only can the king not end up in check after castling, but the square he passes over must also not be under attack by his [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AdvMovement {
            get {
                return ResourceManager.GetString("AdvMovement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are 6 different pieces on the board (Pawn, Knight, Bishop, Rook, Queen, and King) and each one their own unique move set. Many of them are similar to the move sets of other pieces, but they all have distinct differences. For example, pawns are the only piece that can only move forward and not backwards.
        ///
        ///Pawns
        ///
        ///Pawns  have the most basic pieces on the board yet, as you will see both here and in later sections, are one of the most complex overall.
        ///Each side has 8 pawns, and they are initially plac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasicMovement {
            get {
                return ResourceManager.GetString("BasicMovement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pawn Promotion
        ///
        ///If a player&apos;s pawn makes it to the other side of the board without being captured, that player gets to &quot;promote&quot; it to a piece of their choice. The only restriction is that it can not be a king, and must not stay a pawn.
        ///
        ///Forks
        ///
        ///Forks occur when a player moves a piece so that it is attacking two pieces at once. In play, this usually occurs when one of the pieces involved is the king, and usually happens as a result of a Knight moving. When a king is forked, he must use up a turn gettin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasicTactics {
            get {
                return ResourceManager.GetString("BasicTactics", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap bishopB {
            get {
                object obj = ResourceManager.GetObject("bishopB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap bishopW {
            get {
                object obj = ResourceManager.GetObject("bishopW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap board {
            get {
                object obj = ResourceManager.GetObject("board", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap board1 {
            get {
                object obj = ResourceManager.GetObject("board1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap kingB {
            get {
                object obj = ResourceManager.GetObject("kingB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap kingW {
            get {
                object obj = ResourceManager.GetObject("kingW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap knightB {
            get {
                object obj = ResourceManager.GetObject("knightB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap knightW {
            get {
                object obj = ResourceManager.GetObject("knightW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chess is a centuries-old game rooted deep in medieval history.
        ///
        ///Each player takes a colour (white moving first) and takes turns moving pieces to try and force the other player into submission by capturing their King. This means that not ending a move while you yourself are in check is one of the cardinal rules to abide by in Chess. This rule is the reason for 3 key tactics to use when playing chess, the Fork, Skewer, and Pin (discussed in Basic Tactics).
        ///
        ///When moving pieces, players can not move onto th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Overview {
            get {
                return ResourceManager.GetString("Overview", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap pawnB {
            get {
                object obj = ResourceManager.GetObject("pawnB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap pawnW {
            get {
                object obj = ResourceManager.GetObject("pawnW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap queenB {
            get {
                object obj = ResourceManager.GetObject("queenB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap queenW {
            get {
                object obj = ResourceManager.GetObject("queenW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap rookB {
            get {
                object obj = ResourceManager.GetObject("rookB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap rookW {
            get {
                object obj = ResourceManager.GetObject("rookW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
